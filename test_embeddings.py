#!/usr/bin/env python3
"""
Script de test pour les endpoints d'embeddings
"""

import requests
import json

BASE_URL = "http://localhost:5000/api/embeddings"

def test_status():
    """Test du statut du service"""
    print("üîç Test du statut du service...")
    try:
        response = requests.get(f"{BASE_URL}/status")
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_train_tfidf():
    """Test de l'entra√Ænement TF-IDF"""
    print("\nüöÄ Test de l'entra√Ænement TF-IDF...")
    
    texts = [
        "Ce produit est excellent et je le recommande vivement",
        "La qualit√© est d√©cevante, je ne suis pas satisfait",
        "Service client parfait, tr√®s professionnel",
        "Livraison rapide et emballage soign√©",
        "Prix trop √©lev√© pour la qualit√© propos√©e",
        "Tr√®s bon rapport qualit√©-prix, je recommande",
        "Produit d√©faillant, j'ai d√ª le retourner",
        "Parfait pour mes besoins, tr√®s content de mon achat"
    ]
    
    try:
        response = requests.post(
            f"{BASE_URL}/train/tfidf",
            headers={"Content-Type": "application/json"},
            json={"texts": texts}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        print(f"Response: {json.dumps(result, indent=2, ensure_ascii=False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_text_embedding():
    """Test de g√©n√©ration d'embedding"""
    print("\nüìä Test de g√©n√©ration d'embedding...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/text",
            headers={"Content-Type": "application/json"},
            json={"text": "Ce produit est vraiment excellent"}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        if result.get('success'):
            print(f"Dimension: {result['dimension']}")
            print(f"Embedding (premiers 10 √©l√©ments): {result['embedding'][:10]}")
        else:
            print(f"Erreur: {result.get('error')}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_semantic_search():
    """Test de recherche s√©mantique"""
    print("\nüîç Test de recherche s√©mantique...")
    
    texts = [
        "Excellent produit, tr√®s satisfait",
        "Qualit√© m√©diocre, je d√©conseille",
        "Bon rapport qualit√©-prix",
        "Service client d√©cevant",
        "Livraison tr√®s rapide"
    ]
    
    try:
        response = requests.post(
            f"{BASE_URL}/search",
            headers={"Content-Type": "application/json"},
            json={
                "query": "produit de bonne qualit√©",
                "texts": texts,
                "top_k": 3
            }
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        if result.get('success'):
            print("R√©sultats de recherche:")
            for i, res in enumerate(result['results'][:3]):
                print(f"  {i+1}. Similarit√©: {res['similarity']:.3f} - {res['text']}")
        else:
            print(f"Erreur: {result.get('error')}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_compare_texts():
    """Test de comparaison de textes"""
    print("\n‚öñÔ∏è Test de comparaison de textes...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/compare",
            headers={"Content-Type": "application/json"},
            json={
                "text1": "Ce produit est excellent",
                "text2": "Cette article est fantastique"
            }
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        if result.get('success'):
            comp = result['comparison']
            print(f"Similarit√©: {comp['similarity']:.3f} ({comp['similarity_percentage']:.1f}%)")
            print(f"Interpr√©tation: {comp['interpretation']}")
        else:
            print(f"Erreur: {result.get('error')}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_models():
    """Test de r√©cup√©ration des mod√®les"""
    print("\nüìã Test de r√©cup√©ration des mod√®les...")
    
    try:
        response = requests.get(f"{BASE_URL}/models")
        print(f"Status: {response.status_code}")
        result = response.json()
        if result.get('success'):
            print(f"Mod√®les disponibles: {result['count']}")
            for model in result['models']:
                print(f"  - {model['name']} ({model['type']}) - Disponible: {model['available']}")
        else:
            print(f"Erreur: {result.get('error')}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ Tests des Endpoints d'Embeddings")
    print("=" * 50)
    
    tests = [
        ("Status", test_status),
        ("Entra√Ænement TF-IDF", test_train_tfidf),
        ("Embedding de texte", test_text_embedding),
        ("Recherche s√©mantique", test_semantic_search),
        ("Comparaison de textes", test_compare_texts),
        ("Mod√®les disponibles", test_models)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            success = test_func()
            results.append((name, success))
            print(f"{'‚úÖ' if success else '‚ùå'} {name}: {'OK' if success else '√âCHEC'}")
        except Exception as e:
            print(f"‚ùå {name}: ERREUR - {e}")
            results.append((name, False))
    
    print("\n" + "=" * 50)
    print("üìä R√©sum√© des tests:")
    passed = sum(1 for _, success in results if success)
    total = len(results)
    print(f"Tests r√©ussis: {passed}/{total}")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez le backend.")

if __name__ == "__main__":
    main() 